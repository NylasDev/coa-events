<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title || 'Council of The Ancients - Dune Awakening Events' %></title>
    <link rel="icon" href="/images/logo/LOGO-32.webp" type="image/webp">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700;900&family=Exo+2:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --dune-black: #0a0a0a;
            --dune-dark: #1a1a1a;
            --dune-orange: #ff6b00;
            --dune-orange-light: #ff8533;
            --dune-orange-dark: #cc5500;
            --dune-gold: #ffb366;
            --dune-text: #ffffff;
            --dune-text-muted: #cccccc;
        }

        * {
            box-sizing: border-box;
        }

        body {
            background: radial-gradient(ellipse at center, var(--dune-dark) 0%, var(--dune-black) 70%);
            min-height: 100vh;
            font-family: 'Exo 2', sans-serif;
        }
        
        /* Fix for modal backdrop issues */
        .modal-backdrop {
            z-index: 1040 !important;
        }
        
        .modal {
            z-index: 1050 !important;
        }
        
        /* Reset body styles when modal is closed but backdrop remains */
        body:not(.modal-open) .modal-backdrop {
            display: none !important;
            color: var(--dune-text);
            position: relative;
        }

        /* Animated background particles */
        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: 
                radial-gradient(2px 2px at 20px 30px, var(--dune-orange), transparent),
                radial-gradient(2px 2px at 40px 70px, var(--dune-gold), transparent),
                radial-gradient(1px 1px at 90px 40px, var(--dune-orange-light), transparent),
                radial-gradient(1px 1px at 130px 80px, var(--dune-orange), transparent),
                radial-gradient(2px 2px at 160px 30px, var(--dune-gold), transparent);
            background-repeat: repeat;
            background-size: 200px 100px;
            animation: float 20s linear infinite;
            opacity: 0.05;
            z-index: -1;
        }

        @keyframes float {
            0% { transform: translateY(0px) rotate(0deg); }
            50% { transform: translateY(-20px) rotate(180deg); }
            100% { transform: translateY(0px) rotate(360deg); }
        }
        
        .navbar {
            background: rgba(26, 26, 26, 0.95) !important;
            backdrop-filter: blur(15px);
            border-bottom: 2px solid var(--dune-orange);
            box-shadow: 0 2px 20px rgba(255, 107, 0, 0.3);
        }
        
        .navbar-brand {
            color: var(--dune-text) !important;
            font-weight: 700;
            font-family: 'Orbitron', monospace;
            font-size: 1.3rem;
            text-shadow: 0 0 10px var(--dune-orange);
        }

        .navbar-nav .nav-link {
            color: var(--dune-text-muted) !important;
            font-weight: 500;
            font-family: 'Exo 2', sans-serif;
            transition: all 0.3s ease;
            padding: 0.8rem 1rem !important;
        }

        .navbar-nav .nav-link:hover {
            color: var(--dune-orange) !important;
            text-shadow: 0 0 5px var(--dune-orange);
        }

        .dropdown-menu {
            background: rgba(26, 26, 26, 0.95);
            border: 1px solid var(--dune-orange);
            backdrop-filter: blur(15px);
        }

        .dropdown-item {
            color: var(--dune-text-muted);
            transition: all 0.3s ease;
        }

        .dropdown-item:hover {
            background: rgba(255, 107, 0, 0.1);
            color: var(--dune-orange);
        }
        
        .card {
            background: rgba(26, 26, 26, 0.9);
            backdrop-filter: blur(15px);
            border: 2px solid var(--dune-orange);
            border-radius: 15px;
            color: var(--dune-text);
            box-shadow: 0 5px 25px rgba(255, 107, 0, 0.2);
        }
        
        .card-header {
            background: rgba(255, 107, 0, 0.1);
            border-bottom: 1px solid rgba(255, 107, 0, 0.3);
            font-family: 'Orbitron', monospace;
            font-weight: 600;
        }
        
        .btn-discord {
            background: linear-gradient(135deg, #5865F2, #4752C4);
            border: 2px solid #5865F2;
            color: white;
            font-family: 'Orbitron', monospace;
            font-weight: 600;
            transition: all 0.3s ease;
            box-shadow: 0 3px 15px rgba(88, 101, 242, 0.3);
        }
        
        .btn-discord:hover {
            background: linear-gradient(135deg, #4752C4, #3c45a5);
            border-color: #4752C4;
            color: white;
            transform: translateY(-2px);
            box-shadow: 0 5px 20px rgba(88, 101, 242, 0.5);
        }
        
        .text-light-custom {
            color: var(--dune-text-muted) !important;
        }
        
        .alert {
            border-radius: 15px;
            border: none;
            backdrop-filter: blur(10px);
            font-family: 'Exo 2', sans-serif;
        }

        .alert-danger {
            background: rgba(220, 53, 69, 0.2);
            border: 1px solid rgba(220, 53, 69, 0.5);
            color: #ff6b6b;
        }

        .alert-success {
            background: rgba(40, 167, 69, 0.2);
            border: 1px solid rgba(40, 167, 69, 0.5);
            color: #51cf66;
        }
        
        /* Toast styling for notifications */
        .toast {
            background: rgba(26, 26, 26, 0.95);
            backdrop-filter: blur(15px);
            border: 1px solid var(--dune-orange);
            color: var(--dune-text);
            font-family: 'Exo 2', sans-serif;
            border-radius: 10px;
            box-shadow: 0 5px 25px rgba(0, 0, 0, 0.3);
        }
        
        .toast-container {
            position: fixed;
            bottom: 20px;
            right: 20px;
            z-index: 9999;
        }
        
        .toast-header {
            background: rgba(255, 107, 0, 0.2);
            color: var(--dune-orange);
            border-bottom: 1px solid var(--dune-orange-dark);
        }
        
        .toast-body {
            padding: 12px 15px;
        }
        
        .toast.bg-success {
            border-color: #28a745;
        }
        
        .toast.bg-success .toast-header {
            background: rgba(40, 167, 69, 0.2);
            color: #51cf66;
            border-color: #28a745;
        }
        
        .toast.bg-danger {
            border-color: #dc3545;
        }
        
        .toast.bg-danger .toast-header {
            background: rgba(220, 53, 69, 0.2);
            color: #ff6b6b;
            border-color: #dc3545;
        }
        
        .toast.bg-info {
            border-color: #0dcaf0;
        }
        
        .toast.bg-info .toast-header {
            background: rgba(13, 202, 240, 0.2);
            color: #39d9ff;
            border-color: #0dcaf0;
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark">
        <div class="container">
            <a class="navbar-brand fw-bold d-flex align-items-center" href="/">
                <img src="/images/logo/LOGO-32.webp" alt="COA Logo" style="width:40px;height:40px;object-fit:cover;border-radius:50%;filter:drop-shadow(0 0 8px #ff8c00cc);">
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-auto">
                    <% if (isAuthenticated) { %>
                        <li class="nav-item">
                            <a class="nav-link <%= path === '/dashboard' ? 'active' : '' %>" href="/dashboard">
                                <i class="bi bi-calendar3"></i> Events Calendar
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link <%= path === '/events' ? 'active' : '' %>" href="/events">
                                <i class="bi bi-list-task"></i> All Events
                            </a>
                        </li>
                        <% if (typeof canManageEvents !== 'undefined' && canManageEvents) { %>
                            <li class="nav-item">
                                <a class="nav-link <%= path === '/events/create' ? 'active' : '' %>" href="/events/create">
                                    <i class="bi bi-plus-circle"></i> Create Event
                                </a>
                            </li>
                        <% } %>
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-bs-toggle="dropdown">
                                <i class="bi bi-person-circle"></i> <%= user.username %>
                                <% if (typeof canManageEvents !== 'undefined' && canManageEvents) { %>
                                    <span class="badge bg-warning text-dark ms-1">Mentat</span>
                                <% } %>
                            </a>
                            <ul class="dropdown-menu">
                                <% if (typeof canManageEvents !== 'undefined' && canManageEvents) { %>
                                    <li><h6 class="dropdown-header">
                                        <i class="bi bi-shield-check text-warning"></i> Mentat Powers
                                    </h6></li>
                                    <li><a class="dropdown-item" href="/events/create">
                                        <i class="bi bi-plus-circle text-success"></i> Forge Event
                                    </a></li>
                                    <li><a class="dropdown-item" href="/events">
                                        <i class="bi bi-gear text-primary"></i> Command Events
                                    </a></li>
                                    <li><hr class="dropdown-divider"></li>
                                <% } %>
                                <li>
                                    <form id="logoutForm" action="/logout" method="POST" style="display: inline;">
                                        <button type="submit" class="dropdown-item">
                                            <i class="bi bi-box-arrow-right"></i> Return to Desert
                                        </button>
                                    </form>
                                </li>
                            </ul>
                        </li>
                    <% } else { %>
                        <li class="nav-item">
                            <a class="nav-link <%= path === '/login' ? 'active' : '' %>" href="/login">
                                <i class="bi bi-box-arrow-in-right me-1"></i> Access Terminal
                            </a>
                        </li>
                    <% } %>
                </ul>
            </div>
        </div>
    </nav>

    <main class="container mt-4">
        <!-- Flash messages - Hidden but used to trigger toasts via JS -->
        <% if (typeof messages !== 'undefined' && messages) { %>
            <% if (messages.error && messages.error.length > 0) { %>
                <% messages.error.forEach(function(error, index) { %>
                    <div id="toast-error-<%= index %>" class="d-none" data-message="<%= error %>" data-type="danger"></div>
                <% }); %>
            <% } %>
            <% if (messages.success && messages.success.length > 0) { %>
                <% messages.success.forEach(function(success, index) { %>
                    <div id="toast-success-<%= index %>" class="d-none" data-message="<%= success %>" data-type="success"></div>
                <% }); %>
            <% } %>
        <% } %>
        
        <!-- Page content will be inserted here -->
        <%- body %>
    </main>

    <!-- Toast container for notifications -->
    <div class="toast-container position-fixed bottom-0 end-0 p-3" id="toastContainer">
        <!-- Toasts will be inserted here dynamically -->
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/js/notifications.js"></script>
    
    <!-- Toast notifications script -->
    <script>
        // Function to show toast notifications
        function showToast(message, type = 'success', title = '') {
            // Set default titles based on type
            if (!title) {
                switch(type) {
                    case 'success':
                        title = 'Success';
                        break;
                    case 'danger':
                        title = 'Error';
                        break;
                    case 'info':
                        title = 'Information';
                        break;
                    case 'warning':
                        title = 'Warning';
                        break;
                    default:
                        title = 'Notification';
                }
            }
            
            // Get icon based on type
            let icon = 'bi-check-circle-fill';
            switch(type) {
                case 'danger':
                    icon = 'bi-exclamation-triangle-fill';
                    break;
                case 'info':
                    icon = 'bi-info-circle-fill';
                    break;
                case 'warning':
                    icon = 'bi-exclamation-circle-fill';
                    break;
            }
            
            // Create toast element
            const toastElement = document.createElement('div');
            toastElement.className = `toast bg-${type} text-white`;
            toastElement.setAttribute('role', 'alert');
            toastElement.setAttribute('aria-live', 'assertive');
            toastElement.setAttribute('aria-atomic', 'true');
            
            toastElement.innerHTML = `
                <div class="toast-header">
                    <i class="bi ${icon} me-2"></i>
                    <strong class="me-auto">${title}</strong>
                    <small>Just now</small>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
                <div class="toast-body">
                    ${message}
                </div>
            `;
            
            // Add to container
            document.getElementById('toastContainer').appendChild(toastElement);
            
            // Initialize and show toast
            const toast = new bootstrap.Toast(toastElement, {
                delay: 5000,
                autohide: true
            });
            toast.show();
            
            // Remove from DOM after hiding
            toastElement.addEventListener('hidden.bs.toast', () => {
                toastElement.remove();
            });
        }
        
        // Show toasts for flash messages
        document.addEventListener('DOMContentLoaded', () => {
            // Convert hidden flash message elements to toasts
            document.querySelectorAll('[id^="toast-"]').forEach(el => {
                const message = el.dataset.message;
                const type = el.dataset.type || 'info';
                if (message) {
                    showToast(message, type);
                }
            });
            
            // For form submissions, show a loading toast
            const forms = document.querySelectorAll('form');
            forms.forEach(form => {
                form.addEventListener('submit', (e) => {
                    // Ignore logout form
                    if (form.id === 'logoutForm') return;
                    
                    const submitButtons = form.querySelectorAll('button[type="submit"]');
                    const actionType = form.dataset.action || 'Submitting';
                    
                    showToast(`${actionType}... Please wait`, 'info');
                    
                    // Disable submit buttons to prevent double submission
                    submitButtons.forEach(button => {
                        button.disabled = true;
                        const originalText = button.innerHTML;
                        button.innerHTML = '<i class="bi bi-hourglass-split me-1"></i> Processing...';
                        
                        // Re-enable after 5 seconds if form submission takes too long
                        setTimeout(() => {
                            button.disabled = false;
                            button.innerHTML = originalText;
                        }, 5000);
                    });
                });
            });
        });
    </script>
</body>
</html>
